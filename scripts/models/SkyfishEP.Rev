##############
# Tree model #
##############

if (SAMPLETIMES == "iso"){
    MAX_AGE = 500000
} else if (SAMPLETIMES == "hetero"){
    MAX_AGE = 1.2E6
}

H = 0.587405
sd = 2*H   # 95% probability interval spread over 2-orders of magnitude

# we create the events drawn from the multi-value event eventDistribution
# as a prior on the number of events, we use a Poisson distribution with a mean of 10
# we have two valueDistribution
# - the population sizes with prior dnLognormal(ln(500000),sd)
# - the change times with prior Uniform(0.0,MAX_AGE)
# we also assume that there is at least on population size but no change time
events ~ dnMultiValueEvent (eventDistribution = dnPoisson(lambda=10),
                   valueDistribution=[dnLognormal(ln(500000),sd),
                                      dnUniform(0.0,MAX_AGE)],
                   names=["theta","time"],
                   minNumberEvents=[1,0])

# apply a move that adds and removes pairs of theta+time
moves.append( mvMultiValueEventBirthDeath(events, weight=50) )
# add a move that changes the theta variables
moves.append( mvMultiValueEventSlide(events, name="theta", lambda=1.0, weight=10, tune=!FALSE) )
moves.append( mvMultiValueEventScale(events, name="theta", lambda=1.0, weight=10, tune=!FALSE) )
# add a move that changes the time variables
moves.append( mvMultiValueEventSlide(events, name="time", lambda=10.0, weight=10, tune=!FALSE) )
moves.append( mvMultiValueEventScale(events, name="time", lambda=0.5, weight=10, tune=!FALSE) )

n_events := events.getNumberOfEvents()
pop_size := events.getRealPosValues(name="theta")
changePoints := events.getRealPosValues(name="time")


if ( INPUTDATA == "treesample" ){
    tree_prior = dnCoalescentSkyline(theta=pop_size, times=changePoints, method="specified", model = PIECES, taxa=taxa)
} else {
    ### the time tree is a stochastic node modeled by the coalescent skyline process (dnCoalescentSkyline)
    psi ~ dnCoalescentSkyline(theta=pop_size, times=changePoints, method="specified", model = PIECES, taxa=taxa) 
}
interval_times := changePoints


# workaround for starting value of tree
if (INPUTDATA == "sequences"){
    trees = readTreeTrace("output/" + NUM_MCMC_ITERATIONS + "iterations/sequences/horses_numiterations" + NUM_MCMC_ITERATIONS + "_thinning" + THINNING + "_" + SAMPLETIMES + "_constant_NG_intNG_sequences_numtreesNG_fromNGtrees_reps" + NUM_REPLICATES + ".trees", treetype = "clock", burnin = 0.1)
    maptree = mapTree(trace=trees, mean=FALSE, conditionalAges=TRUE)
    psi.setValue( maptree )
}
