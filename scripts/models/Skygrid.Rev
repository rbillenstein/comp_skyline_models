##############
# Tree model #
##############

if (SAMPLETIMES == "iso"){
    MAX_AGE = 500000
} else if (SAMPLETIMES == "hetero"){
    MAX_AGE = 1.2E6
}

NUM_INTERVALS = NUM_INTS
for (i in 1:(NUM_INTERVALS-1)) {

    changePoints[i] <- i * ((MAX_AGE)/NUM_INTERVALS)

}

population_size_at_present ~ dnUniform(0,1E8)
population_size_at_present.setValue(100000)

moves.append( mvScaleBactrian(population_size_at_present,weight=5) )
moves.append( mvMirrorMultiplier(population_size_at_present,weight=5) )
moves.append( mvRandomDive(population_size_at_present,weight=5) )

# precision := 1/var
# sd = sqrt(var) = sqrt(1/precision)
population_size_global_precision ~ dnGamma(shape=0.001, rate=(1.0/1000.0))
population_size_global_precision.setValue(0.1)
moves.append(mvScale(population_size_global_precision, weight = 1.0))

population_size_global_scale := sqrt( 1.0 / population_size_global_precision )

for (i in 1:(NUM_INTERVALS-1)) {
  # non-centralized parameterization of GMRF
  delta_log_population_size[i] ~ dnNormal( mean=0, sd=population_size_global_scale )
  # Make sure values initialize to something reasonable
  delta_log_population_size[i].setValue(runif(1,-0.1,0.1)[1])
  moves.append( mvSlideBactrian(delta_log_population_size[i], weight=5) )
}

pop_size := fnassembleContinuousMRF(population_size_at_present,delta_log_population_size,initialValueIsLogScale=FALSE,order=1)


# Move all field parameters in one go
moves.append( mvEllipticalSliceSamplingSimple(delta_log_population_size,weight=5,tune=FALSE) )
# joint sliding moves of all vector elements
moves.append( mvVectorSlide(delta_log_population_size, weight=10) )
# up-down slide of the entire vector and the rate at present
rates_up_down_move = mvUpDownScale(weight=10.0)
rates_up_down_move.addVariable(population_size_at_present,FALSE)
rates_up_down_move.addVariable(delta_log_population_size,TRUE)
moves.append( rates_up_down_move )
# shrink expand moves
# moves.append( mvShrinkExpand( delta_log_population_size, sd=population_size_global_scale, weight=10 ) )


if ( INPUTDATA == "treesample" ){
    tree_prior = dnCoalescentSkyline(theta=pop_size, times=changePoints, method="specified", model = PIECES, taxa=taxa)
    interval_times := changePoints
} else {
    ### the time tree is a stochastic node modeled by the coalescent skyline process (dnCoalescentSkyline)
    psi ~ dnCoalescentSkyline(theta=pop_size, times=changePoints, method="specified", model = PIECES, taxa=taxa) 
    interval_times := psi.getIntervalAges()
}
