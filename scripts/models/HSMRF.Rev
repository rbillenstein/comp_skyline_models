##############
# Tree model #
##############

if (SAMPLETIMES == "iso"){
    MAX_AGE = 500000
} else if (SAMPLETIMES == "hetero"){
    MAX_AGE = 1.2E6
}

NUM_INTERVALS = NUM_INTS
for (i in 1:(NUM_INTERVALS-1)) {

    changePoints[i] <- i * ((MAX_AGE)/NUM_INTERVALS)

}

population_size_at_present ~ dnUniform(0,1E8)
population_size_at_present.setValue(100000)

moves.append( mvScaleBactrian(population_size_at_present,weight=5) )
moves.append( mvMirrorMultiplier(population_size_at_present,weight=5) )
moves.append( mvRandomDive(population_size_at_present,weight=5) )

# this value depends on the number of intervals, you can find the best value using RevGadgets
if (NUM_INTERVALS == 10) {
  # setMRFGlobalScaleHyperpriorNShifts(9, "HSMRF")
  population_size_global_scale_hyperprior <- 0.0523
} else if (NUM_INTERVALS == 50) {
  # setMRFGlobalScaleHyperpriorNShifts(49, "HSMRF")
  population_size_global_scale_hyperprior <- 0.0051
} else if (NUM_INTERVALS == 100) {
  # setMRFGlobalScaleHyperpriorNShifts(99, "HSMRF")
  population_size_global_scale_hyperprior <- 0.0021
} else {
  print("Please set number of intervals to 10, 50, or 100")
}
population_size_global_scale ~ dnHalfCauchy(0,1)

moves.append( mvScaleBactrian(population_size_global_scale,weight=5.0) )

for (i in 1:(NUM_INTERVALS-1)) {
  # Variable-scaled variances for hierarchical horseshoe
  sigma_population_size[i] ~ dnHalfCauchy(0,1)
  # Make sure values initialize to something reasonable
  sigma_population_size[i].setValue(runif(1,0.005,0.1)[1])
  # moves on the single sigma values
  moves.append( mvScaleBactrian(sigma_population_size[i], weight=5) )
  # non-centralized parameterization of horseshoe
  delta_log_population_size[i] ~ dnNormal( mean=0, sd=sigma_population_size[i]*population_size_global_scale*population_size_global_scale_hyperprior )
  # Make sure values initialize to something reasonable
  delta_log_population_size[i].setValue(runif(1,-0.1,0.1)[1])
  moves.append( mvSlideBactrian(delta_log_population_size[i], weight=5) )
}

pop_size := fnassembleContinuousMRF(population_size_at_present,delta_log_population_size,initialValueIsLogScale=FALSE,order=1)

# Move all field parameters in one go
# moves.append( mvEllipticalSliceSamplingSimple(delta_log_population_size,weight=5,tune=FALSE) )
# Move all field hyperparameters in one go
moves.append( mvHSRFHyperpriorsGibbs(population_size_global_scale, sigma_population_size, delta_log_population_size, population_size_global_scale_hyperprior, propGlobalOnly=0.75, weight=20) )
# Swap moves to exchange adjacent delta,sigma pairs
moves.append( mvHSRFIntervalSwap(delta_log_population_size,sigma_population_size,weight=5) )
# joint sliding moves of all vector elements
moves.append( mvVectorSlide(delta_log_population_size, weight=10) )
# up-down slide of the entire vector and the rate at present
rates_up_down_move = mvUpDownScale(weight=10.0)
rates_up_down_move.addVariable(population_size_at_present,FALSE)
rates_up_down_move.addVariable(delta_log_population_size,TRUE)
moves.append( rates_up_down_move )
# shrink expand moves
moves.append( mvShrinkExpand( delta_log_population_size, sd=population_size_global_scale, weight=10 ) )


if ( INPUTDATA == "treesample" ){
    tree_prior = dnCoalescentSkyline(theta=pop_size, times=changePoints, method="specified", model = PIECES, taxa=taxa)
    interval_times := changePoints
} else {
    ### the time tree is a stochastic node modeled by the coalescent skyline process (dnCoalescentSkyline)
    psi ~ dnCoalescentSkyline(theta=pop_size, times=changePoints, method="specified", model = PIECES, taxa=taxa) 
    interval_times := psi.getIntervalAges()
}
